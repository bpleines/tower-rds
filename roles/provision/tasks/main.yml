---
- name: Create key pair using key_material obtained using 'file' lookup plugin
  ec2_key:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}" 
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    #key info 
    name: tower_rds
    key_material: "{{ lookup('file', private_ssh_key | replace('.pem','')  + '.pub') }}"
  register: key
  tags: always

- name: "Use ec2_ami_facts to find CentOS 7 AMI in {{ region }}" 
  ec2_ami_facts:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}" 
    aws_secret_key: "{{ aws_secret_key }}" 
    region: "{{ region }}" 
    filters:
      name: "CentOS Linux 7 x86_64 HVM EBS ENA 1805_01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-77ec9308.4"
  register: fetched_image
  tags: always

- name: "Set the image_id"
  set_fact:
    linux_image: "{{ fetched_image.images[0]['image_id'] }}"
  tags: always 

- name: Create the Control Node Security Group
  ec2_group:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}" 
    name: control
    description: Security group for the Ansible Control Node
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 22
  register: control_security
  tags: control

- name: Create the Linux Control Node
  ec2_instance:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    #Must be defined when using assign_public_ip
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    #key pair used in group_vars/all/main.yml
    key_name: "{{ key_pair }}"
    #image properties
    name: control{{ idempotent_id }}
    instance_type: t2.small
    image_id: "{{ linux_image }}"
    wait: yes
    security_group: control
    network:
      assign_public_ip: yes
    tags:
      Name: control{{ idempotent_id }}
    #Explicitly define state
    state: present
  register: tower_control_launched
  tags: control

- name: Add the Control Node to an in-memory inventory group
  add_host:  
    name: "{{ item.public_dns_name }}" 
    groups: control
  with_items: "{{ tower_control_launched.instances }}"
  tags: control

- name: Create the Tower Application Nodes Security Group
  ec2_group:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}" 
    aws_secret_key: "{{ aws_secret_key }}" 
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    name: application
    description: Security group for the Tower Application Nodes
    #Work in progress
    rules:
      - proto: tcp
        ports:
          - 80
        cidr_ip: 0.0.0.0/0
        rule_desc: allow http from everywhere
      - proto: tcp
        ports:
          - 443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow https on everywhere
      #This should be locked down to the control security group
      - proto: tcp
        ports:
          - 25672
          - 4369
          - 5672
        cidr_ip: 0.0.0.0/0
        rule_desc: allow rabbitmq from everywhere
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow ssh from everywhere
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
        rule_desc: allow icmp from everywhere
  register: application_security
  tags: application

- name: Provision Tower Application Nodes
  ec2_instance:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    #key pair used in group_vars/all/main.yml
    key_name: "{{ key_pair }}"
    #image properties
    name: tower{{ item }}{{ idempotent_id }}
    #Suggested minimum sizing from https://docs.ansible.com/ansible-tower/latest/html/quickinstall/prepare.html
    instance_type: t2.medium
    image_id: "{{ linux_image }}"
    wait: yes
    security_group: application
    network:
      assign_public_ip: yes
    tags:
      Name: tower{{ item }}{{ idempotent_id }}
    #Explicitly define state
    state: present    
  register: tower_application_launched
  with_items: [1, 2, 3]
  tags: application

- name: Add tower nodes to an in-memory inventory group
  add_host:
    name: "{{ tower_application_launched.results[item].instances[0].public_dns_name }}"
    groups: tower
  with_items: [0, 1, 2]
  tags: application

#- name: Create the RDS Node Security Group
#  ec2_group:
#    #authentication variables vaulted in group_vars/all/vault.yml
#    aws_access_key: "{{ aws_access_key }}"
#    aws_secret_key: "{{ aws_secret_key }}"
#    name: rds
#    description: Security group for the Ansible Control Node
#    vpc_id: "{{ vpc_id }}"
#    region: "{{ region }}"
#    #This also needs to be locked down
#    rules:
#      - proto: all
#        cidr_ip: 0.0.0.0/0
#        rule_desc: allow all traffic
#  register: rds_security
#  tags: rds

- name: Provision Tower RDS Postgres Database (this may take awhile)
  rds:
    #authentication variables vaulted in group_vars/all/vault.yml
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    #image details
    command: create
    instance_name: postgres
    backup_retention: 0
    db_name: awx
    db_engine: postgres
    size: 20
    instance_type: db.t2.medium
    username: awx
    password: "{{ postgres_password }}"
    multi_zone: yes
    wait: yes
    wait_timeout: 1000
    tags:
      Application: tower
  register: tower_rds_launched
  tags: rds

- name: Add the rds node to an in-memory inventory group
  add_host:
    name: "{{ item.endpoint }}" 
    groups: rds
  with_items: 
    - "{{ tower_rds_launched.instance }}"
  tags: rds

- name: Debug the control instance public dns name
  debug:
    msg: "{{ groups['control'] }}"
  tags: control

- name: Debug the tower application instance public dns name
  debug:
    msg: "{{ groups['tower'] }}"
  tags: application

- name: Debug the rds instance public dns name
  debug:
    msg: "{{ groups['rds'] }}"
  tags: rds
...
